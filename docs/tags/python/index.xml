<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>python on DirtyHands-Tester</title>
    <link>https://qdriven.github.io/tags/python/</link>
    <description>Recent content in python on DirtyHands-Tester</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>QDriven- All rights reserved</copyright>
    <lastBuildDate>Tue, 18 Aug 2020 10:41:15 +0000</lastBuildDate><atom:link href="https://qdriven.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Related库,拯救你满是dict的代码，让测试代码更好懂</title>
      <link>https://qdriven.github.io/blog/python/2020-08-18-related/</link>
      <pubDate>Tue, 18 Aug 2020 10:41:15 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2020-08-18-related/</guid>
      <description>[QA-Daily] Python Related库,拯救你满是dict的代码，让测试代码更好懂 Related是一个python的仓库,用来序列化和反序列. 对于测试人员来说，选择一个第三方lib的使用，最主要的是三点:</description>
    </item>
    
    <item>
      <title>Python DeepDiff 使用</title>
      <link>https://qdriven.github.io/blog/python/2020-08-17-deepdiff/</link>
      <pubDate>Mon, 17 Aug 2020 10:41:15 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2020-08-17-deepdiff/</guid>
      <description>DeepDiff 使用 DeepDiff的用处:
Deep Difference of dictionaries, iterables, strings and other objects.</description>
    </item>
    
    <item>
      <title>测试日志2020-5 前端部署 NGINX Conf文件自动配置</title>
      <link>https://qdriven.github.io/blog/tools/nginx-runner/</link>
      <pubDate>Thu, 30 Jul 2020 12:12:00 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/tools/nginx-runner/</guid>
      <description>前端部署 NGINX Conf文件自动配置 新部署了一个服务，测试环境NGINX帮忙配置一下；这周老鸟被这些事情忙的不亦乐乎，一会nginx加一个环境配置， 一会部署一个测试环境前端,一会重启一些nginx,一周很快就过去了，老鸟感觉一周测试的事情做的很少，倒是做了很多nginx运维的事情. 按照现在流行的说法叫test-ops，不知道哪个天才创造了这个职位名称，但是很遗憾，老鸟不能再招人了，公司HC已经冻结了，但是如果一直这样也不是个事情呀.</description>
    </item>
    
    <item>
      <title>快速生成简单的TPS报告</title>
      <link>https://qdriven.github.io/blog/python/2020-07-01-generate-tps-chart/</link>
      <pubDate>Fri, 13 Dec 2019 02:19:56 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2020-07-01-generate-tps-chart/</guid>
      <description>练手的机会无处不在，不需要太久，也许只要10分钟半个小时就可以. 测试人员来说每天重复的事情其实不少，比如今天这件，大体时期如下:
 要做压力测试，需要提供一个TPS时间序列报告 压力测试工具是开发自己写的，TPS的数据从日志里面拿 不同的并发数下面需要重复好几次整理收集的事情，不同的版本下面又需要做好多次这样的事情  那么先让我们改进一下吧。</description>
    </item>
    
    <item>
      <title>测试的Python须知脑图</title>
      <link>https://qdriven.github.io/blog/python/python-tester-should-know/</link>
      <pubDate>Sat, 27 Jul 2019 21:34:04 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/python-tester-should-know/</guid>
      <description>下图是使用Python进行自动化测试需要了解的大纲.</description>
    </item>
    
    <item>
      <title>Use Anaconda3 Python In Ubuntue Usage</title>
      <link>https://qdriven.github.io/blog/python/1-add_anaconda3_python/</link>
      <pubDate>Sat, 20 Apr 2019 23:58:45 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/1-add_anaconda3_python/</guid>
      <description>Use Anaconda3 Python In Ubuntu First of all, where is your annaconda3 installed, and where is the system python path?</description>
    </item>
    
    <item>
      <title>jLoan Calculation</title>
      <link>https://qdriven.github.io/blog/python/loan-calculation/</link>
      <pubDate>Mon, 13 Aug 2018 22:35:32 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/loan-calculation/</guid>
      <description>Loan Calculation Example  Loan Rule Defintion Installment Calculation Overdue Calculation IRR Calculation  Loan Rule Definition Installments Calculation  repayment-Principal: ROUND(10000/3,2) repayment-interest: ROUND(10000*2%,2)  Advanced Repayment calculation Overall Payment = Current Term Repayment + Remain Principal+ default penalty(10000*1%)</description>
    </item>
    
    <item>
      <title>jmespath 使用，jsonpath外的另外一种选择</title>
      <link>https://qdriven.github.io/blog/python/jmespath/</link>
      <pubDate>Mon, 13 Aug 2018 22:35:32 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/jmespath/</guid>
      <description>在测试过程中，经常会去JSON中的某个值，jmespath可以是除了jsonpath的另外一种选择. 下面通过几个例子来说明jmespath在python的使用
jmespath python安装 非常简单直接pip,</description>
    </item>
    
    <item>
      <title>Pythonic,What is it</title>
      <link>https://qdriven.github.io/blog/python/2016-05-11-pythonic/</link>
      <pubDate>Wed, 11 May 2016 10:41:15 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2016-05-11-pythonic/</guid>
      <description>Pythonic Style Pythonic 是种很有趣的风格，有些实际上python的惯用方法和特有方法。
Switch Two variables python 通过tuple进行pack，unpack就不需要temp变量</description>
    </item>
    
    <item>
      <title>Python Tools- unittest,pip,pylint</title>
      <link>https://qdriven.github.io/blog/python/2016-04-19-python-tools/</link>
      <pubDate>Tue, 19 Apr 2016 10:41:15 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2016-04-19-python-tools/</guid>
      <description>Python Tools 以下内容是Writing Solid Python Code-91 suggestions to improve your python program的 读书笔记。下面是关于第七章，使用工具辅助项目开发的笔记，这里提到了如下工具：</description>
    </item>
    
    <item>
      <title>Python Tricky-01</title>
      <link>https://qdriven.github.io/blog/python/2016-04-17-python-tricky-01/</link>
      <pubDate>Sun, 17 Apr 2016 10:41:15 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2016-04-17-python-tricky-01/</guid>
      <description>Python Tricky python tricky 是记录一些Python使用过程中一些神奇的小技巧.</description>
    </item>
    
    <item>
      <title>Python Tricky-02</title>
      <link>https://qdriven.github.io/blog/python/2016-04-17-python-tricky-02/</link>
      <pubDate>Sun, 17 Apr 2016 10:41:15 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2016-04-17-python-tricky-02/</guid>
      <description>Python Tricky-2 max split &amp;#34;&amp;#34;&amp;#34;split a string max times&amp;#34;&amp;#34;&amp;#34; string = &amp;#34;a_b_c_d_e&amp;#34; print(string.</description>
    </item>
    
    <item>
      <title>Prototype Pattern</title>
      <link>https://qdriven.github.io/blog/tips/refactoring/2016-04-11-prototype-pattern/</link>
      <pubDate>Mon, 11 Apr 2016 23:35:45 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/tips/refactoring/2016-04-11-prototype-pattern/</guid>
      <description>prototype pattern 实际上是通过clone的方式创建出同一个类的不同对象.
Java Prototype 一般Prototype模式中，又一个prototype的抽象类：</description>
    </item>
    
    <item>
      <title>Python 面向对象，以及访问对象属性基础</title>
      <link>https://qdriven.github.io/blog/python/2016-02-28-python_oop_attributes/</link>
      <pubDate>Sun, 28 Feb 2016 14:57:44 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2016-02-28-python_oop_attributes/</guid>
      <description>在前面的Zabbix API调用中我们看到了python的__getattr__的妙用，下面就探索一下这里面的道理,所以就聊聊python面向对象的基础知识.
Python 面向对象 说到面向对象，就会说到类(class)，对象(object),那么什么是Class，Object呢？</description>
    </item>
    
    <item>
      <title>Simple Word Counter</title>
      <link>https://qdriven.github.io/blog/python/2016-02-28-simple_word_count/</link>
      <pubDate>Sun, 28 Feb 2016 10:41:15 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2016-02-28-simple_word_count/</guid>
      <description>有时测试的面试题中会考点编程的内容，比如统计字符串中的相同字符数量，具体题目如下：
 给定一个字符串，如MIssissippi 计算字符串中每一个不同字符出现的数量  Python 的解法 letter_count={} for letter in &amp;#39;Mississippi&amp;#39;: letter[letter]=letter_count.</description>
    </item>
    
    <item>
      <title>Python 访问Zabbix API</title>
      <link>https://qdriven.github.io/blog/python/2016-02-26-call_zabbix_api/</link>
      <pubDate>Fri, 26 Feb 2016 16:51:20 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2016-02-26-call_zabbix_api/</guid>
      <description>Zabbix API 访问 准备使用Python来访问一下Zabbix，首先当然阅读一下Zabbix的API Manual,抛开什么json rpc这样的问题之外，zabbix的API的分类还是很工整的，所以看起来比较舒服，在一定了解了zabbix基础之后，基本上就可以上手来写了，网上查了一下，找个一个python zabbix的调用的一个客户段代码，感觉不错，就开始行动了。</description>
    </item>
    
    <item>
      <title>zabbix 基础</title>
      <link>https://qdriven.github.io/blog/python/2016-02-26-zabbix_monitoring/</link>
      <pubDate>Fri, 26 Feb 2016 16:48:54 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2016-02-26-zabbix_monitoring/</guid>
      <description>抽空花了1个小时看了一下Zabbix的界面和简单的手册，了解了一下Zabbix的基础知识，下面是一个小小的记录,后面就写一些Python的脚本来直接调用Zabbix的API在进行一些自动化的操作.
Zabbix 基础 Zabbix 是一个开源的监控系统，由于需要帮助运维写一些调用ZABBIX API的代码，所以就开始了解一下ZABBIX的一些基本概念.</description>
    </item>
    
    <item>
      <title>python yaml 使用介绍</title>
      <link>https://qdriven.github.io/blog/python/2016-02-13-python-yaml/</link>
      <pubDate>Sat, 13 Feb 2016 18:38:43 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2016-02-13-python-yaml/</guid>
      <description>Python YAML 应用 YAML由于其可读性，越来越多的地方用它来做配置文件了来代替XML文件.下面就是用来介绍如何使用PYTHON来进行YAML的操作. 读取yaml或者写yaml，主要是用的是两个方法：</description>
    </item>
    
    <item>
      <title>Python 中String的格式化</title>
      <link>https://qdriven.github.io/blog/python/2015-11-15-string-format-in-python/</link>
      <pubDate>Sun, 15 Nov 2015 15:12:56 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2015-11-15-string-format-in-python/</guid>
      <description>python中对于string有些挺有意思操作,现在把他记录如下：
output = &amp;#39;Hello {0}!&amp;#39;.format(&amp;#39;World!&amp;#39;) output1 = &amp;#39;Hello {0} {1} !</description>
    </item>
    
    <item>
      <title>Python完成简单的SVN Reviewboard Precommit的客户端</title>
      <link>https://qdriven.github.io/blog/python/2015-05-16-svn_reviewboard_python/</link>
      <pubDate>Sat, 16 May 2015 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2015-05-16-svn_reviewboard_python/</guid>
      <description>最近公司需要使用review board进行代码pre-commit review(pre-commit:正式提交前review)，而公司的现状是：
 使用SVN作为代码版本管理工具 开发工具有eclipse，idea MAC 和windows 机器居多  考虑到开发eclipse和idea插件，连接review board我一个人无法完成，同时能力也不够来开发这两种插件， 所以就准备python写一个命令行工具，期间研究了一下taobao review board的插件，感觉有点复杂，这个也是 使用python来些命令行工具的一个理由,也考虑过使用node-webkit来写个客户端，不过由于时间上的限制也就先放弃了</description>
    </item>
    
    <item>
      <title>Python PIP mirror设置</title>
      <link>https://qdriven.github.io/blog/python/2014-11-24-python_mirror/</link>
      <pubDate>Mon, 24 Nov 2014 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2014-11-24-python_mirror/</guid>
      <description>使用默认的pip mirror速度实在太慢了，所以使用douban的pypi镜像.如何使用呢？很简单，以下几步：
 修改~/.pip/pip.conf 文件，将index_url改成douban镜像地址:http://pypi.douban.com/simple  [global] index-url=http://pypi.</description>
    </item>
    
    <item>
      <title>Python virtualenv in Mac</title>
      <link>https://qdriven.github.io/blog/python/2014-11-24-virtual_env/</link>
      <pubDate>Mon, 24 Nov 2014 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2014-11-24-virtual_env/</guid>
      <description>virtualenv是一个创建python虚拟环境的工具,主要的解决的问题是,让在一个干净的Python环境中开发,不需要被不同的python 安装包烦恼,python3中实际已经内置了venv的,可以不使用virtualenv,以下是简要说明以下安装使用方法:
ps: 关于Python3和Python2很有可能在同一台机器上都有安装,所以注意python命令对应的是那个版本.have fun :)</description>
    </item>
    
    <item>
      <title>Python 基础-字符串处理</title>
      <link>https://qdriven.github.io/blog/python/2013-11-24-python_string/</link>
      <pubDate>Sun, 24 Nov 2013 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2013-11-24-python_string/</guid>
      <description>学习一门语言，就当多一门手艺。虽然是个测试，被人唾弃，但是相信自己比什么都重要。 卷起袖子，dirty your hand。以下是学习https://github.com/qiwsir/StarterLearningPython的笔记.
python 运行 以下是python运行命令，同时带了两个不同的参数：</description>
    </item>
    
    <item>
      <title>Python 基础-语法</title>
      <link>https://qdriven.github.io/blog/python/2013-11-24-python_basic/</link>
      <pubDate>Sun, 24 Nov 2013 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2013-11-24-python_basic/</guid>
      <description>学习一门语言，就当多一门手艺。虽然是个测试，被人唾弃，但是相信自己比什么都重要。 卷起袖子，dirty your hand。以下是学习https://github.com/qiwsir/StarterLearningPython的笔记.
python 运行 以下是python运行命令，同时带了两个不同的参数：</description>
    </item>
    
    <item>
      <title>Python 常用包</title>
      <link>https://qdriven.github.io/blog/python/2013-11-24-python_libs/</link>
      <pubDate>Sun, 24 Nov 2013 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2013-11-24-python_libs/</guid>
      <description>python常用包介绍
Network Application  HTTP Requests  Distrbuted systems  ZeroMQ RabbitMQ  Web applications  WSGI Flask URL routing Template Engine development Web Server Django Werkzeug Tornado Pyramid Nginx WSGI Server Gunicorn uWSGI  The majority of self-hosted Python applications today are hosted with a WSGI server such as Gunicorn, either directly or behind a lightweight web server such as nginx.</description>
    </item>
    
  </channel>
</rss>
