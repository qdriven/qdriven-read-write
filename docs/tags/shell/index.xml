<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>shell on DirtyHands-Tester</title>
    <link>https://qdriven.github.io/tags/shell/</link>
    <description>Recent content in shell on DirtyHands-Tester</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>QDriven- All rights reserved</copyright>
    <lastBuildDate>Tue, 12 May 2020 08:29:57 +0000</lastBuildDate><atom:link href="https://qdriven.github.io/tags/shell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>命令行艺术-测试人员版本</title>
      <link>https://qdriven.github.io/blog/shell/shell-arts/</link>
      <pubDate>Tue, 12 May 2020 08:29:57 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/shell/shell-arts/</guid>
      <description>QA-Daily将每日不定期推送一些测试相关的github仓库,翻译/英文原文文章,好用的教程给测试/开发人员发现有用的测试工具,了解测试最新动态,扩大自己的技术视野,从开源项目中获取知识,提高自身能力,提高自己的Coding技能,提高自己的工资,也能让测试人员职业上又了解更多的选择!信息不是太少,是太多了,希望QA-Daily能在筛选信息方面帮到想要了解测试/质量相关的工程师. GITHUB 上面又一个很好的仓库命令行的艺术,一页纸的篇幅介绍了常用的 shell 命令, 这个项目有 82.</description>
    </item>
    
    <item>
      <title>内网穿透方案 - frp</title>
      <link>https://qdriven.github.io/blog/tips/frp-usage/</link>
      <pubDate>Wed, 21 Nov 2018 23:11:47 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/tips/frp-usage/</guid>
      <description>frp 使用golang编写的，下面几个例子来说明一下如何使用frp.
 todo reference  </description>
    </item>
    
    <item>
      <title>VIM 使用小结</title>
      <link>https://qdriven.github.io/blog/shell/2016-04-05-vim-%E6%80%BB%E7%BB%93/</link>
      <pubDate>Tue, 05 Apr 2016 18:31:42 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/shell/2016-04-05-vim-%E6%80%BB%E7%BB%93/</guid>
      <description>VIM 用法 日常会不经意间使用VIM编辑器来处理一些文本编辑的事情。所以整理VIM的基本使用如下：
   命令 说明     q 退出   i insert   a append   h 左移   k 上移   j 下移   l 右移   r 替换   u 撤销   x 删除光标位置字符   d^ 删除当前位置到行首   dd 删除当前行   d$ 删除当前位置到行尾   dw 删除当前位置到一个word尾   3dd 删除当前行下三行   p 粘贴   &amp;laquo; 当前行左移一个宽度   &amp;raquo; 当前行右移一个宽度   ％ 匹配的括号   ^ 行的开始   .</description>
    </item>
    
    <item>
      <title>shell来自动生成Jekyll post文件</title>
      <link>https://qdriven.github.io/blog/shell/2015-11-05-generate-jekyll-post-file/</link>
      <pubDate>Thu, 05 Nov 2015 18:31:42 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/shell/2015-11-05-generate-jekyll-post-file/</guid>
      <description>通过以下代码可以生成jekyll 的post 文件
#! /bin/bash  CAT=$1 TITLE=$2 echo &amp;#34;current location: $PWD&amp;#34; echo &amp;#34;category: $CAT&amp;#34; echo &amp;#34;file_name: $TITLE&amp;#34; FilePrefix=`date &amp;#34;+%Y-%m-%d-&amp;#34;` FILE_NAME=&amp;#34;$FilePrefix$TITLE.</description>
    </item>
    
    <item>
      <title>更新一个目录下所有的git repository的shell 脚本</title>
      <link>https://qdriven.github.io/blog/shell/2014-10-24-shell_for_update_all_git_repo/</link>
      <pubDate>Fri, 24 Oct 2014 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/shell/2014-10-24-shell_for_update_all_git_repo/</guid>
      <description>更新一个目录下所有的git repository的shell 脚本 最近感觉需要了解一些shell脚本的使用，刚好本地上面的一个文件夹中有一些github上面的代码仓库，所以刚好学着用shell来更新各个代码仓库
#! /bin/bash  for file in .</description>
    </item>
    
    <item>
      <title>Shell Learning - Variant 变量</title>
      <link>https://qdriven.github.io/blog/shell/2014-08-24-shell_101_variant/</link>
      <pubDate>Sun, 24 Aug 2014 10:31:11 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/shell/2014-08-24-shell_101_variant/</guid>
      <description>变量赋值 #!/bin/sh var=value echo $var var=&amp;#39;the value&amp;#39; echo $var var=&amp;#34;the $PARAM&amp;#34; echo $var echo $var echo `pwd` echo $(pwd) #result: ╰─[:)] % sh shell_variant.</description>
    </item>
    
    <item>
      <title>Linux Learning - linux 用户管理</title>
      <link>https://qdriven.github.io/blog/tips/linux-users/</link>
      <pubDate>Sun, 24 Aug 2014 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/tips/linux-users/</guid>
      <description>linux 用户管理 基本上所有linux命令，都可以先用cmd --help后用man cmd查看特殊的选项</description>
    </item>
    
    <item>
      <title>Linux Learning - linux的文件系统</title>
      <link>https://qdriven.github.io/blog/shell/linux_fs/</link>
      <pubDate>Sun, 24 Aug 2014 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/shell/linux_fs/</guid>
      <description>linux的文件系统 概述（个人描述） linux有个说法，一切皆文件，算是对IO的简化。 通常我们操作的目录+文件名是个逻辑上的概念，用以定位，目录也是文件。 物理上的概念是分区，分区需要挂载mount到特定目录上使用，挂载后就屏蔽了物理细节了。</description>
    </item>
    
    <item>
      <title>Shell Learning - Concept</title>
      <link>https://qdriven.github.io/blog/shell/2014-08-24-shell_101_concept/</link>
      <pubDate>Sun, 24 Aug 2014 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/shell/2014-08-24-shell_101_concept/</guid>
      <description>摘自：http://wklken.me/posts/2014/01/12/shell-script-base.html
标准IO 文件描述符 0 标准输入 默认键盘 1 标准输出 默认终端 2 标准错误 默认终端  重定向 &amp;gt; 输出重定向 &amp;gt;&amp;gt; 追加到输出重定向 &amp;lt; 输入重定向 &amp;lt;&amp;lt; 追加到输入重定向 ls -l &amp;gt; /tmp/a cmd &amp;gt;/dev/null #输出到垃圾桶  dev是设备(device)的英文缩写。/dev这个目录对所有的用户都十分重要。因为在这个目录中包含了所有Linux系统中使用的外部设备。但是这里并不是放的外部设备的驱动程序，这一点和windows,dos操作系统不一样。它实际上是一个访问这些外部设备的端口。我们可以非常方便地去访问这些外部设备，和访问一个文件，一个目录没有任何区别。</description>
    </item>
    
    <item>
      <title>Shell Learning - Control Flow</title>
      <link>https://qdriven.github.io/blog/shell/2014-08-24-shell_101_controll_flow/</link>
      <pubDate>Sun, 24 Aug 2014 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/shell/2014-08-24-shell_101_controll_flow/</guid>
      <description>if/test 条件测试 #!/bin/bash  a=34 if test $a = 4 then echo true else echo false fi if [ $a -eq 34 ] then echo true else echo false fi #Result: h controll_flow.</description>
    </item>
    
    <item>
      <title>Shell Learning - iptables</title>
      <link>https://qdriven.github.io/blog/tips/iptable-nat/</link>
      <pubDate>Sun, 24 Aug 2014 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/tips/iptable-nat/</guid>
      <description>kernel modules
modprobe ip_tables modprobe iptable_nat modprobe iptable_filter modprobe ip_conntrack modprobe ip_conntrack_ftp modprobe ip_nat_ftp   ip_forward</description>
    </item>
    
    <item>
      <title>Shell Learning - Scripting</title>
      <link>https://qdriven.github.io/blog/shell/2014-08-24-shell_101_scripting/</link>
      <pubDate>Sun, 24 Aug 2014 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/shell/2014-08-24-shell_101_scripting/</guid>
      <description>Shell Script sample #!/bin/bash # do somthing Run Shell Script sh script.</description>
    </item>
    
    <item>
      <title>Shell Learning - 操作符号</title>
      <link>https://qdriven.github.io/blog/shell/2014-08-24-shell_101_operator/</link>
      <pubDate>Sun, 24 Aug 2014 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/shell/2014-08-24-shell_101_operator/</guid>
      <description>摘自：http://wklken.me/posts/2014/01/12/shell-script-base.html
计算 #!/bin/bash no_1=4 no_2=5 let result=no_1+no_2 let result-- echo $result let result++ echo $result # expr(漏洞之源？？) result=`expr 3+4` echo $result result=`expr $no_1+345` echo $result result=$[ no_1 + no_2 ] echo $result result=$[ $no_1 + 5 ] echo $result result=$(( no_1 + 5 )) echo $result # result: 8 9 3+4 4+345 9 9 9 </description>
    </item>
    
    <item>
      <title>Shell Learning - 环境变量</title>
      <link>https://qdriven.github.io/blog/shell/2014-08-24-shell_101_env/</link>
      <pubDate>Sun, 24 Aug 2014 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/shell/2014-08-24-shell_101_env/</guid>
      <description>摘自：http://wklken.me/posts/2014/01/12/shell-script-base.html
env env |grep keyword 修改环境变量 未在当前进程中定义，而是从父进程中继承而来的变量 export 设置环境变量,之后,从当前shell 执行的任何程序都会继承这个变量</description>
    </item>
    
  </channel>
</rss>
