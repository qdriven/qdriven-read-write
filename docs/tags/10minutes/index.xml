<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>10Minutes on DirtyHands-Tester</title>
    <link>https://qdriven.github.io/tags/10minutes/</link>
    <description>Recent content in 10Minutes on DirtyHands-Tester</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>QDriven- All rights reserved</copyright>
    <lastBuildDate>Mon, 20 Jan 2020 09:52:58 +0000</lastBuildDate><atom:link href="https://qdriven.github.io/tags/10minutes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>git stash 使用</title>
      <link>https://qdriven.github.io/blog/tips/git/git-tips-git-stash/</link>
      <pubDate>Mon, 20 Jan 2020 09:52:58 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/tips/git/git-tips-git-stash/</guid>
      <description>git-stash 文档的说明有点抽象，下面用一些例子来解释如何使用git-stash。
git-stash - Stash the changes in a dirty working directory away git-stash 主要使用的场景如下：</description>
    </item>
    
    <item>
      <title>快速生成简单的TPS报告</title>
      <link>https://qdriven.github.io/blog/python/2020-07-01-generate-tps-chart/</link>
      <pubDate>Fri, 13 Dec 2019 02:19:56 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/python/2020-07-01-generate-tps-chart/</guid>
      <description>练手的机会无处不在，不需要太久，也许只要10分钟半个小时就可以. 测试人员来说每天重复的事情其实不少，比如今天这件，大体时期如下:
 要做压力测试，需要提供一个TPS时间序列报告 压力测试工具是开发自己写的，TPS的数据从日志里面拿 不同的并发数下面需要重复好几次整理收集的事情，不同的版本下面又需要做好多次这样的事情  那么先让我们改进一下吧。</description>
    </item>
    
    <item>
      <title>一次获取IP地址的小重构</title>
      <link>https://qdriven.github.io/blog/pattern/refactor-get-ipaddress/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/pattern/refactor-get-ipaddress/</guid>
      <description>原始代码不好的地方：
 有很多if/else 扩展需要增加内部的if/else判断  public static String getIpAddr(HttpServletRequest request) { if (request == null) { return &amp;#34;unknown&amp;#34;; } String ip = request.</description>
    </item>
    
    <item>
      <title>服务器免密登录</title>
      <link>https://qdriven.github.io/blog/tips/ssh-login/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/tips/ssh-login/</guid>
      <description>使用下例中ssh-keygen和ssh-copy-id，仅需通过3个步骤的简单设置而无需输入密码就能登录远程Linux主机。
 ssh-keygen 创建公钥和密钥。 ssh-copy-id 把本地主机的公钥复制到远程主机的authorized_keys文件上。 ssh-copy-id 也会给远程主机的用户主目录（home）和~/.</description>
    </item>
    
  </channel>
</rss>
