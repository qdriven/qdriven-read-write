<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JAVA on DirtyHands-Tester</title>
    <link>https://qdriven.github.io/tags/java/</link>
    <description>Recent content in JAVA on DirtyHands-Tester</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>QDriven- All rights reserved</copyright>
    <lastBuildDate>Thu, 30 Jul 2020 12:12:00 +0000</lastBuildDate><atom:link href="https://qdriven.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>测试日志2020-1 MAVEN 创建项目JAVA项目</title>
      <link>https://qdriven.github.io/blog/pattern/tips-maven-java/</link>
      <pubDate>Thu, 30 Jul 2020 12:12:00 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/pattern/tips-maven-java/</guid>
      <description>MAVEN 创建项目JAVA项目 MAVEN是开发过程中常用的一个管理软件项目代码的工具，这里开始一个简单系列的介绍，给测试同学介绍MAVEN的使用， 以便更好的了解开发过程，以及版本，文档管理的方式.
1.1. 什么是MAVEN 在理解MAVEN之前首先先要了解一个JAVA项目有哪些内容组成.</description>
    </item>
    
    <item>
      <title>测试日志2020-2 Github Cli使用</title>
      <link>https://qdriven.github.io/blog/tips/git/tips-github-cli/</link>
      <pubDate>Thu, 30 Jul 2020 12:12:00 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/tips/git/tips-github-cli/</guid>
      <description>Github Cli,是一个命令行工具，可以让你在命令行中直接操作github的仓库. 那么命令行工具可以提高平常的效率吗? 我的答案是可以,原因如下:
 使用习惯: Dev/Test 工作中基本上和Code打交道，现代的IDE都可以terminal(命令行工具),不需要额外的切换浏览器操作github仓库 一个命令实现一个目的: 浏览器操作需要点击几个页面，输入不同的数据进行创建，但是命令行中使用了默认参数，可以一个命令就完成你想要的操作  0.</description>
    </item>
    
    <item>
      <title>测试日志2020-4 Dive Into Markov(阿里妈妈功能测试平台)</title>
      <link>https://qdriven.github.io/blog/tools/alimama-intelplatform-1/</link>
      <pubDate>Thu, 30 Jul 2020 12:12:00 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/tools/alimama-intelplatform-1/</guid>
      <description>Dive Into Markov(阿里妈妈功能测试平台) 架构分析 根据Markov本身提供的功能图，以及代码，大致总结Markov如下图: 从技术角度看了一下这个代码仓库的pom文件,有几个问题可以改善</description>
    </item>
    
    <item>
      <title>Xmind,Test Cases,and Allure templates for TDD</title>
      <link>https://qdriven.github.io/blog/pattern/1-junit5casetesttemplate/</link>
      <pubDate>Wed, 07 Aug 2019 21:34:04 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/pattern/1-junit5casetesttemplate/</guid>
      <description>Xmind,TestCases and JUnit5 Allure Template Learn from the requirements and write test cases are the common daily work of a tester.</description>
    </item>
    
    <item>
      <title>Defensive Programming</title>
      <link>https://qdriven.github.io/blog/pattern/3-defensive-programing/</link>
      <pubDate>Wed, 20 Feb 2019 23:58:45 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/pattern/3-defensive-programing/</guid>
      <description>Defensive Programming - reuse the validation What does Defensive Programming mean?</description>
    </item>
    
    <item>
      <title>Java Singleton ENUM as instance HOLDER</title>
      <link>https://qdriven.github.io/blog/tips/refactoring/2016-04-11-singleton/</link>
      <pubDate>Mon, 11 Apr 2016 23:35:45 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/tips/refactoring/2016-04-11-singleton/</guid>
      <description>Singleton 单例设计模式 单例模式是产生一个类的唯一实例。
Java Singleton Java 的Singleton实际上有很多种写法的，下面一个是使用枚举方式写的：</description>
    </item>
    
    <item>
      <title>Prototype Pattern</title>
      <link>https://qdriven.github.io/blog/tips/refactoring/2016-04-11-prototype-pattern/</link>
      <pubDate>Mon, 11 Apr 2016 23:35:45 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/tips/refactoring/2016-04-11-prototype-pattern/</guid>
      <description>prototype pattern 实际上是通过clone的方式创建出同一个类的不同对象.
Java Prototype 一般Prototype模式中，又一个prototype的抽象类：</description>
    </item>
    
    <item>
      <title>Singleton 的不同写法</title>
      <link>https://qdriven.github.io/blog/pattern/2015-12-02-singleton/</link>
      <pubDate>Wed, 02 Dec 2015 12:42:18 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/pattern/2015-12-02-singleton/</guid>
      <description>Singleton是JAVA的一个非常常见的方式，不过不同写的方式会有不同的想法，下面就介绍一下这个模式
Singleton 懒汉式模式，线程不安全 一个基本的写法如下:
private static LazySingleton instance; private LazySingleton(){} public static LazySingleton getInstance(){ if(instance==null){ instance=new LazySingleton(); } return instance; } 这个的一个问题是线程不安全，就是当instance是null的时候，可能有两个线程同时满足，这样就是两个实例产生</description>
    </item>
    
  </channel>
</rss>
