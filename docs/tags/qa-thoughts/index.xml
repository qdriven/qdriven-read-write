<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>qa-thoughts on DirtyHands-Tester</title>
    <link>https://qdriven.github.io/tags/qa-thoughts/</link>
    <description>Recent content in qa-thoughts on DirtyHands-Tester</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>QDriven- All rights reserved</copyright>
    <lastBuildDate>Thu, 07 Jan 2021 11:40:11 +0200</lastBuildDate><atom:link href="https://qdriven.github.io/tags/qa-thoughts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>测试陷阱4-跳出舒适区</title>
      <link>https://qdriven.github.io/blog/qa-traps/4-comfortable-zone/</link>
      <pubDate>Thu, 07 Jan 2021 11:40:11 +0200</pubDate>
      
      <guid>https://qdriven.github.io/blog/qa-traps/4-comfortable-zone/</guid>
      <description>最近几年陆陆续续也面试了不少测试的同学，好多同学也都提到了跳出舒适区的概念，好多人因为觉得需要跳出舒适区所以觉得需要换一个工作环境； 就测试而言好多同学都是觉得一直在做类似的事情，没有外部刺激，没有提高；同时又相信没有实际的项目锻炼，技能很难得到提高；甚至有些同学很明显 在自己公司做的还是不错的，升职也有，加薪也有，可是就是觉得自己在舒适区里面，觉得一定要跳出来才能很快提高。大体上套用美国总统的话就是keep me great.</description>
    </item>
    
    <item>
      <title>测试陷阱3-自动化测试就是测试的技术</title>
      <link>https://qdriven.github.io/blog/qa-traps/3-tech-is-all/</link>
      <pubDate>Fri, 27 Nov 2020 23:49:47 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/qa-traps/3-tech-is-all/</guid>
      <description>随着自动化测试的风靡，测试同学们越来越觉得自动化就是全部，自动化就是自己的方向。 这些本身没有太大问题，但是如果认为自动化测试就是终极技术，那么我觉得这是一个很大的陷阱。 为什么？个人觉得大部分的测试把自动化和技术都定义的太狭小了,技术和自动化都是非常宽泛的定义,下面是我自己问自己的两个问题:
 什么是自动化？测试讨论的自动化难道就是接口自动化，UI自动化测试吗？ 什么是技术？技术难道就是写代码吗？把测试用例代码化吗？  什么是自动化？测试讨论的自动化难道就是接口自动化，UI自动化测试吗？ 为什么先问这个问题，因为很多同学一开始没有接触过自动化，后来写了一些自动化用例之后，要么觉得高人一等，要么觉得一会就觉得没意思了，原因何在？因为写过自动化测试用例之后，要么觉得我技术很厉害了，基本可以把所有问题都解决了；要么马上一个疑问是这有技术含量吗？ 大量重复的代码，差不多的验证点，没有比设计测试用例和执行用例高级到多少,然后就有一种深深的幻灭的感觉？路在何方的问题又来了.</description>
    </item>
    
    <item>
      <title>测试陷阱2-永远都在忙碌重要紧急的事情</title>
      <link>https://qdriven.github.io/blog/qa-traps/2-things-matter/</link>
      <pubDate>Sat, 31 Oct 2020 13:22:54 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/qa-traps/2-things-matter/</guid>
      <description>测试永远都很忙，忙着回归测试，忙着各种各样的测试，各种各样的交付，但是这样忙碌了3年左右之后， 你发现你在确实是进步了，进步的主要方面我想大部分就是以下几个方面:
 沟通能力增强了 业务熟悉了非常多，开发测试流程熟悉了很多 处理紧急事情能力提高了很多  这已经很不错，可能有些测试同样的过了三年这些进步都没有，更多的在听指令，别人说测试就是做测试。</description>
    </item>
    
    <item>
      <title>QE-Meetup： TDD 小结</title>
      <link>https://qdriven.github.io/blog/qa-thoughts/1-tdd-way/</link>
      <pubDate>Wed, 07 Oct 2020 11:40:11 +0200</pubDate>
      
      <guid>https://qdriven.github.io/blog/qa-thoughts/1-tdd-way/</guid>
      <description> 以下是关于TDD的小结，我个人的感受是：
 如果这个实践做的事情只是想知道那些接口出现了变动，那么可能通过代码review或者沟通是更好的方式，为了得到这个目的感觉要做的事情有点多 技术自然是很厉害，但是团队是不是沟通上面出现问题了？难道都不愿意到连改了什么，影响什么都不想说了   </description>
    </item>
    
    <item>
      <title>放养式开发管理</title>
      <link>https://qdriven.github.io/blog/qa-thoughts/3-let-it-be/</link>
      <pubDate>Tue, 11 Aug 2020 08:58:55 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/qa-thoughts/3-let-it-be/</guid>
      <description>或许是在充满巨大不确定性的情况下，或许是在敏捷开发的情况下，放养开发管理变得越来越多.陆陆续续经历了一些公司，项目，发现几乎是一个共性.
我相信放养式开发管理是个中性词，没有好和坏，更多的是适合不适合. 一个词在不同的环境下，反应的情况是不一样的。
放养式开发管理 - 一个成功的例子 如果在一个开发个人能力突出，严谨，负责，功能能力强的团队，放养式开发管理可以介绍很多不太需要的沟通成本，大家相互信任，对于共同的期望值有足够的默契，这是没有什么问题的， 这样的团队我也在其中过，那是一个非常棒的体验， 理性，克制，坦诚，一个目标，各司其职，而且都能完成的很好。但是如果我回头看看以前的这个团队的成员，每个人5年后发展，总共4个人，一个P8，一个高级经理了，一个资深架构了，一个创业当老板了。有时会感慨，这是一个什么团队.</description>
    </item>
    
    <item>
      <title>做决定，负责任</title>
      <link>https://qdriven.github.io/blog/qa-thoughts/2-decision-making/</link>
      <pubDate>Mon, 10 Aug 2020 21:50:47 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/qa-thoughts/2-decision-making/</guid>
      <description>做决定，负责任,并不容易.
测试工作，决定，负责任 为什么突然想起这个做决定，负责任的话题？因为日常工作中，我慢慢发现很多很多的开发同学不喜欢做决定，明明很多事情再我看来可以下决定，却非要请示上级，而每一次的请示有时会有很长一个等待时间，而有时这个等待时间往往在下班前后，叫人下班也不是，不下班也不是，只能单纯的等待请示结果.
举个实际的例子来说，下班前的我们测试说测试完成了，可以上线了。然后负责这个功能的开发就是准备上线，问运维什么是否可以今天上线？运维回答说明天可以上线吗？开发马上把问题给了他老板，让他老板同不同意？而他的老板由于出差，等了三个多小时才回复可以介绍今天不上线。
这个只是一件事情，但是我遇到过不少类似的事情。 我不能说这样的事情有什么大的不对，但是有时细细想想，十分不是滋味。</description>
    </item>
    
    <item>
      <title>软件质量文化建设</title>
      <link>https://qdriven.github.io/blog/qa-thoughts/0-build-in-q/</link>
      <pubDate>Mon, 07 Oct 2019 11:40:11 +0200</pubDate>
      
      <guid>https://qdriven.github.io/blog/qa-thoughts/0-build-in-q/</guid>
      <description>什么是质量文化 测试/QA质量文化建设  内建质量 质量外延    测试过程中的常见问题 这些都是测试过程中的常见问题，但是其实都不容易解决.</description>
    </item>
    
    <item>
      <title>Think in Testing 1-Be Tough</title>
      <link>https://qdriven.github.io/blog/qa-thoughts/4-be-tough/</link>
      <pubDate>Sun, 28 Apr 2019 23:58:45 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/qa-thoughts/4-be-tough/</guid>
      <description>Think in Testing 1: Be Tough If someone tell you that software testing or quality assurance is an easy job to do, he/she might not understand what a tester or qa do.</description>
    </item>
    
    <item>
      <title>Be Tough as a QA</title>
      <link>https://qdriven.github.io/blog/qa-thoughts/thoughts-be-a-touch-tester/</link>
      <pubDate>Tue, 20 Nov 2018 09:25:03 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/qa-thoughts/thoughts-be-a-touch-tester/</guid>
      <description>Think in Testing 1: Be Tough If someone tell you that software testing or quality assurance is an easy job to do, he/she might not understand what a tester or qa do.</description>
    </item>
    
    <item>
      <title>下一步的技术了解</title>
      <link>https://qdriven.github.io/blog/qa-thoughts/2015-12-28-next-reading/</link>
      <pubDate>Mon, 28 Dec 2015 19:49:29 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/qa-thoughts/2015-12-28-next-reading/</guid>
      <description>Thoughtworks 发布了2015年技术雷达，看看他提到的东西可以长长见识。
技术篇 这里提到了几篇Martin Flower的文章，抽时间一定要看看。</description>
    </item>
    
    <item>
      <title>测试用例设计- 随机指定一个产品的测试</title>
      <link>https://qdriven.github.io/blog/qa-thoughts/2015-10-22-random-testcasedesign/</link>
      <pubDate>Thu, 22 Oct 2015 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/qa-thoughts/2015-10-22-random-testcasedesign/</guid>
      <description>有时面试的时候会随机指定一个产品进行测试,比如一个电梯,你会如何设计测试用例？这个问题很发散,更多的是看应聘者的条理 和分析能力.
本质上一个电梯是一个太大的范畴，实际测试的过程中很少一下子会有这么巨大的功能让你测试的。 与其说让你设计测试用例，其实好不如说让你想一个电梯有什么功能,然后根据功能再来考虑测试用例,所以更多的 是考察思路,在实际的测试工作中,如果突然有个人说我今天完成了一个电梯的功能,找个人给我测一下吧。 那么多半这个项目就是个让测试欲哭无泪的项目。</description>
    </item>
    
    <item>
      <title>关于测试职业疑惑的一点想法</title>
      <link>https://qdriven.github.io/blog/qa-thoughts/2013-09-24-thoughts_on_testing/</link>
      <pubDate>Tue, 24 Sep 2013 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/qa-thoughts/2013-09-24-thoughts_on_testing/</guid>
      <description>引子 作为全职测试大概有8年时间了，总体来说整个这8年不是一个愉快的过程。其中辛苦可能没有做过测试的人未必能理解。对于一个职场人来说不够愉快的点个人认为大概可能是以下几点：
 成就感不多 个人技术积累不多 可供选择的机会相对较少，转型难度大  问题分析 1.</description>
    </item>
    
  </channel>
</rss>
