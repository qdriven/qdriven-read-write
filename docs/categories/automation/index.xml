<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>automation on DirtyHands-Tester</title>
    <link>https://qdriven.github.io/categories/automation/</link>
    <description>Recent content in automation on DirtyHands-Tester</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>QDriven- All rights reserved</copyright>
    <lastBuildDate>Wed, 30 Mar 2016 13:15:11 +0800</lastBuildDate><atom:link href="https://qdriven.github.io/categories/automation/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Ansible简单介绍</title>
      <link>https://qdriven.github.io/blog/ansible/2016-03-30-ansible_basic/</link>
      <pubDate>Wed, 30 Mar 2016 13:15:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/ansible/2016-03-30-ansible_basic/</guid>
      <description>Ansible 介绍 Ansible 目前都是使用在python2上面.
installation 在MAC 上面安装ansible有两种方式：</description>
    </item>
    
    <item>
      <title>Jenkins API的简单介绍</title>
      <link>https://qdriven.github.io/blog/automation/2016-03-30-jenkins_basic/</link>
      <pubDate>Wed, 30 Mar 2016 13:15:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/automation/2016-03-30-jenkins_basic/</guid>
      <description>Jenkins 介绍 Jenkins是一个非常有用的持续集成的工具，可以通过它完成代码的build，测试，发布等一系列的事情.
From Jenkins Home Page</description>
    </item>
    
    <item>
      <title>assertions</title>
      <link>https://qdriven.github.io/blog/automation/2016-02-01-assertions/</link>
      <pubDate>Mon, 01 Feb 2016 23:48:35 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/automation/2016-02-01-assertions/</guid>
      <description>由于一直都在进行测试的工作，所以会关注Assertion的工具，发现两个不错的Assertion 第三方包，准备在实践中使用. 这两个分别是：
 Google Truth(http://google.</description>
    </item>
    
    <item>
      <title>WEB 开发的几个重点</title>
      <link>https://qdriven.github.io/blog/automation/2016-01-27-web-dev/</link>
      <pubDate>Wed, 27 Jan 2016 22:47:28 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/automation/2016-01-27-web-dev/</guid>
      <description>再试用了Web 开发的框架之后，归纳一下大致的一个基础Web 开发需要的那些元素:
 URL Router，如何定义URL的访问 Request Handler/Response Handler， HTTP请求/返回的处理  如果组织这些Request Handler/Response Handler 如何定义全局/局部的URL拦截器 如何处理特殊的HTTP Header 如何处理Session/Cookie   Database Access Layer/ORM， 数据操作CRUD  如何CRUD 如何进行分页，排序，filterByCriteria&amp;hellip;.</description>
    </item>
    
    <item>
      <title>为什么自动化，如何自动化</title>
      <link>https://qdriven.github.io/blog/automation/2016-01-10-why_how_automation/</link>
      <pubDate>Sun, 10 Jan 2016 19:14:11 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/automation/2016-01-10-why_how_automation/</guid>
      <description>在做一件事情之前，问一句为什么是必要的.做自动化测试之前也是一样，不管如何总是要有一个理由的吗，哪怕是所有的人都做，我也要做这样的理由. 以下说说我觉得要做自动化的理由.
为什么自动化(Why Automation Testing) 为什么自动化,对于测试的而言的理由 VS 实际情况</description>
    </item>
    
    <item>
      <title>http status code HTTP 状态码</title>
      <link>https://qdriven.github.io/blog/automation/2015-12-23-http_status_code/</link>
      <pubDate>Wed, 23 Dec 2015 22:59:16 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/automation/2015-12-23-http_status_code/</guid>
      <description>HTTP Status Codes This page is created from HTTP status code information found at ietf.</description>
    </item>
    
    <item>
      <title>自动化测试－接口测试</title>
      <link>https://qdriven.github.io/blog/automation/2015-11-27-webservice-automation/</link>
      <pubDate>Fri, 27 Nov 2015 11:10:00 +0000</pubDate>
      
      <guid>https://qdriven.github.io/blog/automation/2015-11-27-webservice-automation/</guid>
      <description>在敏捷开发交付的流程中，自动化测试实际上被放在一个看起来挺重要的位置，而自动化测试中，接口测试是一个投入产出比比较高的 一种自动化测试的形式，而我自己也做了一个这样的脚手架一样的东西可以方便进行自动化测试，关键是在一些现有第三包的基础上做实现，其实一个脚手架不需要几个JAVA类就可以完成了，至少我自己的这个在10个文件以内.要论行数估计也没有多少代码量，主要时间其实都是在想怎么更方便的写自动化测试，怎么使用以后的开源代码了。
下面介绍一下我自己如何完成这个自动化接口测试 脚手架设计和实现的，以及我自己实现过程中的种种发现。主要从以下几个方面来讲：
 如何构建接口自动化测试的脚手架 关于接口测试参考的一些资源 关于接口测试的后续的一些想法  如何构建接口自动化测试的脚手架 接口测试本文中主要是指HTTP的请求，构建接口自动化测试脚手架的时候，首先先看看平常接口测试，测试人员时如何做的，我了解主要是以下几种方式：</description>
    </item>
    
    <item>
      <title>Phantomjs Tutorial</title>
      <link>https://qdriven.github.io/blog/automation/2015-10-24-phantomjs-usage/</link>
      <pubDate>Sat, 24 Oct 2015 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/automation/2015-10-24-phantomjs-usage/</guid>
      <description>自己学习Phatomjs的教程,分享之.
Quick Start 首先phantomjs是个什么? 以下是官方网站的解释:</description>
    </item>
    
    <item>
      <title>Page Factory in Selenium</title>
      <link>https://qdriven.github.io/blog/automation/2015-09-24-page-factory/</link>
      <pubDate>Thu, 24 Sep 2015 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/automation/2015-09-24-page-factory/</guid>
      <description>本文主要用来分析Page Factory实现的原理以及一些扩展的可能性。
Page Factory 的例子 Selenium Page Factory Wiki</description>
    </item>
    
    <item>
      <title>TestNG 报告定制最简单的原理</title>
      <link>https://qdriven.github.io/blog/automation/2015-09-24-testng-simple-report/</link>
      <pubDate>Thu, 24 Sep 2015 10:31:11 +0800</pubDate>
      
      <guid>https://qdriven.github.io/blog/automation/2015-09-24-testng-simple-report/</guid>
      <description>如果需要定制TestNG的测试报告,可以先想一下首先需要什么的数据,其实最简单的数据就是测试用例成功失败的数据, 那么实际上TestNG提供了ITestListener的接口可以让你获取这些测试数据. 同时IReporter 接口可以让用户在调用最后自己生成测试报告.
所以其实只要用一个类实现ITestListener,IReporter就可以了.</description>
    </item>
    
  </channel>
</rss>
